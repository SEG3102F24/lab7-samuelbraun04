
========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\.browserslistrc
========================================
# This file is used by the build system to adjust CSS and JS output to support the specified browsers below.
# For additional information regarding the format and rule options, please see:
# https://github.com/browserslist/browserslist#queries

# For the full list of supported browsers by the Angular framework, please see:
# https://angular.io/guide/browser-support

# You can see what browsers were selected by your queries by running:
#   npx browserslist

last 1 Chrome version
last 1 Firefox version
last 2 Edge major versions
last 2 Safari major versions
last 2 iOS major versions
Firefox ESR
not IE 11 # Angular supports IE 11 only as an opt-in. To opt-in, remove the 'not' prefix on this line.



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\.editorconfig
========================================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\.gitignore
========================================
# See http://help.github.com/ignore-files/ for more about ignoring files.

# compiled output
/dist
/tmp
/out-tsc
# Only exists if Bazel was run
/bazel-out

# dependencies
/node_modules

# profiling files
chrome-profiler-events*.json

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# misc
/.angular/cache
/.sass-cache
/connect.lock
/coverage
/libpeerconnection.log
npm-debug.log
yarn-error.log
testem.log
/typings

# System Files
.DS_Store
Thumbs.db



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\angular.json
========================================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "book-store": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/book-store",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js",
              "@angular/localize/init"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kB",
                  "maximumError": "4kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "book-store:build:production"
            },
            "development": {
              "buildTarget": "book-store:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing",
              "@angular/localize/init"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "cli": {
    "analytics": "b806ba57-e029-45a6-8e7c-9343ec15ed2d"
  }
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\get_code.py
========================================
import os









# For all changes, just give me the entire file with the updated changes so I can just copy and paste your changes. 






# Get the directory where this script is located
current_directory = os.path.dirname(os.path.abspath(__file__))

# Path for the master text file where everything will be pasted
master_file_path = os.path.join(current_directory, 'master_file.txt')

# List of directories to skip
directories_to_skip = {'.angular', '.vscode', 'cypress', 'node_modules', 'dist', '.next', '.git', 'public'}

# Open the master file in write mode
with open(master_file_path, 'w', encoding='utf-8') as master_file:
    # Walk through all directories and subdirectories
    for root, dirs, files in os.walk(current_directory):
        # Skip unwanted directories
        dirs[:] = [d for d in dirs if d not in directories_to_skip]
        
        for file in files:
            # Ignore the master file and package-lock.json
            if file == 'master_file.txt' or file == 'package-lock.json':
                continue
            
            # Get the full path of the file
            file_path = os.path.join(root, file)
            
            # Try to read and append the content of the file
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # Write a label for each file's content
                    master_file.write(f"\n{'='*40}\n")
                    master_file.write(f"FILE: {file_path}\n")
                    master_file.write(f"{'='*40}\n")
                    
                    # Write the content of the current file into the master file
                    master_file.write(content)
                    master_file.write("\n\n")  # Add spacing after each file content
            except Exception as e:
                # If there's an error, log the filename and the error message
                print(f"Error reading {file_path}: {e}")

print(f"All files' contents have been written to {master_file_path}")



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\karma.conf.js
========================================
// Karma configuration file, see link for more information
// https://karma-runner.github.io/1.0/config/configuration-file.html

module.exports = function (config) {
  config.set({
    basePath: '',
    frameworks: ['jasmine', '@angular-devkit/build-angular'],
    plugins: [
      require('karma-jasmine'),
      require('karma-chrome-launcher'),
      require('karma-jasmine-html-reporter'),
      require('karma-coverage'),
      require('@angular-devkit/build-angular/plugins/karma')
    ],
    client: {
      jasmine: {
        // you can add configuration options for Jasmine here
        // the possible options are listed at https://jasmine.github.io/api/edge/Configuration.html
        // for example, you can disable the random execution with `random: false`
        // or set a specific seed with `seed: 4321`
      },
      clearContext: false // leave Jasmine Spec Runner output visible in browser
    },
    jasmineHtmlReporter: {
      suppressAll: true // removes the duplicated traces
    },
    coverageReporter: {
      dir: require('path').join(__dirname, './coverage/book-store'),
      subdir: '.',
      reporters: [
        { type: 'html' },
        { type: 'text-summary' }
      ]
    },
    reporters: ['progress', 'kjhtml'],
    port: 9876,
    colors: true,
    logLevel: config.LOG_INFO,
    autoWatch: true,
    browsers: ['Chrome'],
    singleRun: false,
    restartOnFileChange: true
  });
};



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\package.json
========================================
{
  "name": "book-store",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^18.0.6",
    "@angular/common": "^18.0.6",
    "@angular/compiler": "^18.0.6",
    "@angular/core": "^18.0.6",
    "@angular/forms": "^18.0.6",
    "@angular/platform-browser": "^18.0.6",
    "@angular/platform-browser-dynamic": "^18.0.6",
    "@angular/router": "^18.0.6",
    "@ng-bootstrap/ng-bootstrap": "^17.0.0",
    "@popperjs/core": "^2.11.6",
    "bootstrap": "^5.2.3",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.14.7"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^18.0.7",
    "@angular/cli": "~18.0.7",
    "@angular/compiler-cli": "^18.0.6",
    "@angular/localize": "^18.0.6",
    "@types/jasmine": "~4.3.0",
    "jasmine-core": "~4.6.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.4.5"
  }
}


========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\README.md
========================================
# BookStore

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 12.1.0.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\tsconfig.app.json
========================================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": [
      "@angular/localize"
    ]
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\tsconfig.json
========================================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "esModuleInterop": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\tsconfig.spec.json
========================================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine",
      "@angular/localize"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\.gradle\8.0\gc.properties
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\.gradle\8.0\dependencies-accessors\gc.properties
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\.gradle\8.0\fileChanges\last-build.bin
========================================


========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\.gradle\buildOutputCleanup\cache.properties
========================================
#Sun Nov 03 23:09:28 EST 2024
gradle.version=8.0



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\.gradle\vcs-1\gc.properties
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\build\kotlin\compileKotlin\cacheable\dirty-sources.txt
========================================
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\assemblers\AuthorModelAssembler.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\assemblers\BioModelAssembler.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\assemblers\OrderModelAssembler.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\representation\OrderRepresentation.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\entities\Author.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\repository\AuthorRepository.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\repository\BookRepository.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\repository\BioRepository.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\repository\OrderRepository.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\representation\BioRepresentation.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\representation\BookRepresentation.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\BooksRestApiApplication.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\representation\AuthorRepresentation.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\entities\Book.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\entities\Order.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\assemblers\BookModelAssembler.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\representation\AuthorNameRepresentation.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\controller\ApiController.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\entities\Bio.kt
C:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main\kotlin\seg3x02\booksrestapi\representation\BookTitleRepresentation.kt


========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\build\resources\main\application.properties
========================================
spring.datasource.url=jdbc:mysql://localhost:6033/booksDb
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.platform=mysql



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\index.html
========================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>BookStore</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\main.ts
========================================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));




========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\polyfills.ts
========================================
/***************************************************************************************************
 * Load `$localize` onto the global scope - used if i18n tags appear in Angular templates.
 */
import '@angular/localize/init';
/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
 * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
 * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
 *
 * Learn more in https://angular.io/guide/browser-support
 */

/***************************************************************************************************
 * BROWSER POLYFILLS
 */

/**
 * By default, zone.js will patch all possible macroTask and DomEvents
 * user can disable parts of macroTask/DomEvents patch by setting following flags
 * because those flags need to be set before `zone.js` being loaded, and webpack
 * will put import in the top of bundle, so user need to create a separate file
 * in this directory (for example: zone-flags.ts), and put the following flags
 * into that file, and then add the following code before importing zone.js.
 * import './zone-flags';
 *
 * The flags allowed in zone-flags.ts are listed here.
 *
 * The following flags will work for all browsers.
 *
 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
 *
 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
 *  with the following flag, it will bypass `zone.js` patch for IE/Edge
 *
 *  (window as any).__Zone_enable_cross_context_check = true;
 *
 */

/***************************************************************************************************
 * Zone JS is required by default for Angular itself.
 */
import 'zone.js';  // Included with Angular CLI.


/***************************************************************************************************
 * APPLICATION IMPORTS
 */



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\styles.css
========================================
/* You can add global styles to this file, and also import other style files */



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\test.ts
========================================
// This file is required by karma.conf.js and loads recursively all the .spec and framework files

import 'zone.js/testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting(), {
    teardown: { destroyAfterEach: false }
  }
);



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\app.component.css
========================================
a:link, a:visited {
  background-color: #0000b3;
  color: white;
  padding: 14px 25px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
}

a:hover, a:active {
  background-color: #e60000;
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\app.component.html
========================================
<div class="container">
  <div class="nav-link">
    <a [routerLink]="['/home']"> Home </a>
    <a [routerLink]="['/about']"> About Us </a>
    <a [routerLink]="['/contact']"> Contact Us </a>
    <a [routerLink]="['/books']"> Books </a>
    <a [routerLink]="['/login']"> Login </a>
    <a [routerLink]="['/admin']"> Admin </a>
    <a [routerLink]="['/authors']"> Authors </a>
  </div>
</div>

<div class="container-fluid" >
  <div class="row">
    <div class="col-3">
      <img src="gobooks.jpg" height="150" width="175"/>
    </div>
    <div class="col-6">
      <router-outlet></router-outlet>
    </div>
    <div class="col-3">
      <img src="1books2-med.jpg" height="150" width="175"/>
    </div>
  </div>
</div>




========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\app.component.spec.ts
========================================
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';
import { provideHttpClientTesting } from "@angular/common/http/testing";
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';


describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
    imports: [RouterTestingModule,
        AppComponent],
    providers: [provideHttpClient(withInterceptorsFromDi()), provideHttpClientTesting()]
}).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'book-store'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('book-store');
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\app.component.ts
========================================
import { Component } from '@angular/core';
import { RouterLink, RouterOutlet } from '@angular/router';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css'],
    standalone: true,
    imports: [RouterLink, RouterOutlet]
})
export class AppComponent {
  title = 'book-store';
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\app.config.ts
========================================
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import {provideHttpClient} from "@angular/common/http";

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),
    provideHttpClient()
  ]
};



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\app.routes.ts
========================================
import { Routes } from '@angular/router';
import {HomeComponent} from "./home/home.component";
import {AboutComponent} from "./about/about.component";
import {ContactComponent} from "./contact/contact.component";
import {BooksComponent} from "./books/books.component";
import {BookComponent} from "./books/book/book.component";
import {LoginComponent} from "./login/login.component";
import {AdminComponent} from "./admin/admin.component";
import {loggedInGuard} from "./logged-in.guard";
import {AuthorsComponent} from "./authors/authors.component";

const booksRoutes: Routes = [
  {path: ':id', component: BookComponent}
];

export const routes: Routes = [
  {path: 'home', component: HomeComponent},
  {path: 'about', component: AboutComponent},
  {path: 'contact', component: ContactComponent},
  { path: 'login', component: LoginComponent },
  { path: 'author', component: AuthorsComponent },
  {
    path: 'admin',
    component: AdminComponent,
    canActivate: [ loggedInGuard ]
  },
  {path: 'books', component: BooksComponent,
    children: booksRoutes
  },
  {path: '', redirectTo: 'home', pathMatch: 'full'},
  {path: '**', component: HomeComponent}
];



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\authentication.service.spec.ts
========================================
import { TestBed } from '@angular/core/testing';

import { AuthenticationService } from './authentication.service';

describe('AuthenticationService', () => {
  let service: AuthenticationService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthenticationService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\authentication.service.ts
========================================
import { Injectable } from '@angular/core';
import {Router} from '@angular/router';
import {noop} from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthenticationService {
  redirectUrl: string | null | undefined;

  constructor(private router: Router) {}

  login(user: string, password: string): boolean {
    // hard coded for now
    if (user === 'admin' && password === 'password') {
      sessionStorage.setItem('username', user);
      if (this.redirectUrl) { this.router.navigate([this.redirectUrl]).then(noop); }
      this.redirectUrl = null;
      return true;
    }
    return false;
  }

  logout(): any {
    sessionStorage.removeItem('username');
  }

  getUser(): any {
    return sessionStorage.getItem('username');
  }

  isLoggedIn(): boolean {
    return this.getUser() !== null;
  }
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\logged-in.guard.spec.ts
========================================
import { TestBed } from '@angular/core/testing';
import { CanActivateFn } from '@angular/router';

import { loggedInGuard } from './logged-in.guard';

describe('loggedInGuard', () => {
  const executeGuard: CanActivateFn = (...guardParameters) =>
    TestBed.runInInjectionContext(() => loggedInGuard(...guardParameters));

  beforeEach(() => {
    TestBed.configureTestingModule({});
  });

  it('should be created', () => {
    expect(executeGuard).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\logged-in.guard.ts
========================================
import {CanActivateFn, Router} from '@angular/router';
import {AuthenticationService} from "./authentication.service";
import {inject} from '@angular/core';

export const loggedInGuard: CanActivateFn = (route, state) => {
  const authService = inject(AuthenticationService);
  const router= inject(Router);

  // return  this.authService.isLoggedIn();
  if (authService.isLoggedIn()) {return true; }
  authService.redirectUrl = state.url;
  router.navigate(['./login']).then(() => {});
  return false;
};



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\about\about.component.css
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\about\about.component.html
========================================
<p style="text-align: center">
  <span style="color: #3465a4; font-size: x-large; "><b>
    We are a small team of connoisseurs and book enthusiasts.
  </b></span>
</p>



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\about\about.component.spec.ts
========================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AboutComponent } from './about.component';

describe('AboutComponent', () => {
  let component: AboutComponent;
  let fixture: ComponentFixture<AboutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
    imports: [AboutComponent]
})
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(AboutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\about\about.component.ts
========================================
import { Component } from '@angular/core';

@Component({
    selector: 'app-about',
    templateUrl: './about.component.html',
    styleUrls: ['./about.component.css'],
    standalone: true
})
export class AboutComponent {

}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\admin\admin.component.css
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\admin\admin.component.html
========================================
<div class="container">
  <div [ngStyle]="msgStyle" [hidden]="hideMsg">
    {{message}}
  </div>
  <h1>Book Form</h1>
  <button (click)="addAuthor()" class="btn btn-primary">Add Author</button>
  <form [formGroup]="bookForm" (ngSubmit)="onSubmit()">
    <div class="mb-3">
      <label for="category">Category:</label>
      <input type="text" class="form-control" id="category" formControlName="category">
      <div [hidden]="category.pristine || category.valid"
           class="alert alert-danger">
        Category is required to be <b>Kids</b>, <b>Tech</b> or <b>Cook</b>
      </div>
    </div>
    <div class="mb-3">
      <label for="title">Title:</label>
      <input type="text" class="form-control" id="title" required formControlName="title">
      <div [hidden]="title.pristine || title.valid"
           class="alert alert-danger">
        Title is required.
      </div>
    </div>
    <div class="mb-3">
      <label for="cost">Cost:</label>
      <input type="text" class="form-control" id="cost" required pattern="\d+(.\d{1,2})?" formControlName="cost">
      <div [hidden]="cost.pristine || cost.valid"
           class="alert alert-danger">
        Cost should be a number with two optional decimals
      </div>
    </div>
    <div formArrayName="authors">
      <div *ngFor="let _ of authors.controls; let i=index">
        <ng-container [formGroupName]="i">
          <div class="row g-lg-5 align-items-center">
            <div class="col-auto">
              <label for="authName" class="col-form-label">Author First Name:</label>
            </div>
            <div class="col-auto">
              <input id="authName" class="form-control" formControlName="firstName" type="text">
            </div>
          </div>
          <div class="row g-lg-5 align-items-center">
            <div class="col-auto">
              <label for="authLName" class="col-form-label">Author Last Name:</label>
            </div>
            <div class="col-auto">
              <input id="authLName" class="form-control" formControlName="lastName" type="text">
            </div>
            <div class="col-auto">
              <button class="btn btn-dark form-control" (click)="removeAuthor(i)">X</button>
            </div>
          </div>
        </ng-container>
      </div>
    </div>
    <div class="mb-3">
      <label for="year">Year:</label>
      <input type="text" class="form-control" id="year" formControlName="year">
    </div>
    <div class="mb-3">
      <label for="description">Description:</label>
      <textarea cols="40" class="form-control" id="description" formControlName="description"></textarea>
    </div>
    <button type="submit" class="btn btn-success" [disabled]="bookForm.invalid">Submit</button>
  </form>
</div>



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\admin\admin.component.spec.ts
========================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminComponent } from './admin.component';
import {RouterTestingModule} from "@angular/router/testing";
import { provideHttpClientTesting } from "@angular/common/http/testing";
import {FormsModule, ReactiveFormsModule} from "@angular/forms";
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';

describe('AdminComponent', () => {
  let component: AdminComponent;
  let fixture: ComponentFixture<AdminComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
    imports: [RouterTestingModule, FormsModule, ReactiveFormsModule, AdminComponent],
    providers: [provideHttpClient(withInterceptorsFromDi()), provideHttpClientTesting()]
})
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(AdminComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\admin\admin.component.ts
========================================
import {Component, inject, OnInit} from '@angular/core';
import { AbstractControl, FormArray, FormBuilder, FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import {Author, Book} from '../books/model/book';
import {BooksService} from '../books/service/books.service';
import { NgStyle, NgFor } from '@angular/common';

function categoryValidator(control: FormControl<string>): { [s: string]: boolean } | null {
  const validCategories = ['Kids', 'Tech', 'Cook'];
  if (!validCategories.includes(control.value)) {
    return {invalidCategory: true};
  }
  return null;
}

@Component({
    selector: 'app-admin',
    templateUrl: './admin.component.html',
    styleUrls: ['./admin.component.css'],
    standalone: true,
    imports: [NgStyle, FormsModule, ReactiveFormsModule, NgFor]
})
export class AdminComponent implements OnInit {
  private builder: FormBuilder = inject(FormBuilder);
  private booksService: BooksService = inject(BooksService);
  message: string = '';
  hideMsg = true;
  msgStyle = {
    color: '',
    'background-color': 'white',
    'font-size': '150%',
  };
  bookForm = this.builder.group({
    category: ['', [Validators.required, categoryValidator]],
    title: ['', Validators.required],
    cost: ['', [Validators.required, Validators.pattern('\\d+(\\.\\d{1,2})?')]],
    authors: this.builder.array([]),
    year: ['', Validators.required],
    description: ['', Validators.required]
  });

  get category(): AbstractControl {
    return <AbstractControl>this.bookForm.get('category');
  }

  get title(): AbstractControl {
    return <AbstractControl>this.bookForm.get('title');
  }

  get cost(): AbstractControl {
    return <AbstractControl>this.bookForm.get('cost');
  }

  get authors(): FormArray {
    return this.bookForm.get('authors') as FormArray;
  }

  ngOnInit(): void {
  }

  showMessage(type: string, msg: string): void {
    this.msgStyle.color = type === 'error' ? 'red' : 'blue';
    this.message = msg;
    this.hideMsg = false;
    setTimeout(
      () => {
        this.hideMsg = true;
      }, 3000
    );
  }

  onSubmit(): void {
    const book = new Book(0,
      <string>this.bookForm.value.category,
      <string>this.bookForm.value.title,
      Number(this.bookForm.value.cost),
      [],
      Number(this.bookForm.value.year),
      <string>this.bookForm.value.description);
    const authors = <Author[]>this.bookForm.value.authors;
    this.booksService.addBook(book).subscribe({
      next: (response) => {
        authors.forEach(
          (author: Author) => {
            this.booksService.getAuthorsNamed(author.firstName, author.lastName).subscribe({
                next: (authorList: Author[]) => {
                  if (authorList === undefined || authorList.length === 0) {
                    this.booksService.addBookAuthor(response.id, author).subscribe();
                  } else {
                    // *** Assumes unique firstName/LastName for Authors
                    this.booksService.updateBookAuthors(response.id, authorList[0].id).subscribe();
                  }
                }
              }
            );
          }
        );
        this.showMessage('info', `The was successfully added with id ${response.id}`);
      },
      error: (_: any) => {
        this.showMessage('error', 'Unable to add the book');
      }
    });
    this.bookForm.reset();
    this.authors.clear();
  }

  addAuthor(): void {
    this.authors.push(
      this.builder.group({
        firstName: [''],
        lastName: ['']
      })
    );
  }

  removeAuthor(i: number): void {
    this.authors.removeAt(i);
  }
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\authors\authors.component.css
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\authors\authors.component.html
========================================
<h2>Find Author Information</h2>
<form (ngSubmit)="onSubmit()" #authorForm="ngForm">
  <label for="authorId">Author ID:</label>
  <input
    type="number"
    id="authorId"
    name="authorId"
    [(ngModel)]="authorId"
    required
  />
  <button type="submit">Search</button>
</form>

<div *ngIf="author">
  <h3>Author Details</h3>
  <p><strong>ID:</strong> {{ author.id }}</p>
  <p><strong>Name:</strong> {{ author.firstName }} {{ author.lastName }}</p>
</div>

<div *ngIf="errorMessage">
  <p>{{ errorMessage }}</p>
</div>



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\authors\authors.component.spec.ts
========================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AuthorsComponent } from './authors.component';

describe('AuthorsComponent', () => {
  let component: AuthorsComponent;
  let fixture: ComponentFixture<AuthorsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AuthorsComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(AuthorsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\authors\authors.component.ts
========================================
import { Component } from '@angular/core';
import { BooksService } from '../books/service/books.service';
import { Author } from '../books/model/book';

@Component({
  selector: 'app-authors',
  templateUrl: './authors.component.html',
  styleUrls: ['./authors.component.css'],
})
export class AuthorsComponent {
  authorId!: number;
  author: Author | null = null;
  errorMessage: string | null = null;

  constructor(private booksService: BooksService) {}

  onSubmit(): void {

    if (this.authorId <= 0) {
      this.errorMessage = 'Please enter a valid author ID.';
      this.author = null;
      return;
    }

    this.booksService.getAuthorById(this.authorId).subscribe(
      (data: Author) => {
        this.author = data;
        this.errorMessage = null;
      },
      (error) => {
        this.author = null;
        this.errorMessage = 'Author not found.';
      }
    );
  }
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\books.component.css
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\books.component.html
========================================
<div>
  <h2>Search our Book Collection</h2>
  <div>
    <label for="id">Book Id:</label>
    <input type="text" #bookQuery id="id">
    <button (click)="submit(bookQuery.value)">Search</button>
  </div>
  <div class="container">
    <router-outlet></router-outlet>
  </div>
</div>



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\books.component.spec.ts
========================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { BooksComponent } from './books.component';
import {RouterTestingModule} from "@angular/router/testing";
import { provideHttpClientTesting } from "@angular/common/http/testing";
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';

describe('BooksComponent', () => {
  let component: BooksComponent;
  let fixture: ComponentFixture<BooksComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
    imports: [RouterTestingModule, BooksComponent],
    providers: [provideHttpClient(withInterceptorsFromDi()), provideHttpClientTesting()]
})
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(BooksComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\books.component.ts
========================================
import { Component } from '@angular/core';
import { ActivatedRoute, Router, Routes, RouterOutlet } from '@angular/router';
import {BookComponent} from './book/book.component';

export const booksRoutes: Routes = [
  {path: ':id', component: BookComponent}
];

@Component({
    selector: 'app-books',
    templateUrl: './books.component.html',
    styleUrls: ['./books.component.css'],
    standalone: true,
    imports: [RouterOutlet]
})
export class BooksComponent {
  constructor(private router: Router, private route: ActivatedRoute) { }

  submit(value: string): void {
    this.router.navigate(['./', value], {relativeTo: this.route}).then(r => {});
  }
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\book\book.component.css
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\book\book.component.html
========================================
<div *ngIf="!selectedBook">
  <h2>Sorry can't find the requested book...</h2>
</div>
<div *ngIf="selectedBook">
  <h2>Here are details of the Book {{selectedBook.id}}</h2>
  <div class="row">
    <div class="col-3">Category:</div>
    <div class="col-9">{{ selectedBook.category }}</div>
  </div>
  <div class="row">
    <div class="col-3">Title:</div>
    <div class="col-9">{{ selectedBook.title }}</div>
  </div>
  <div class="row">
    <div class="col-3">Cost:</div>
    <div class="col-9">{{ selectedBook.cost }}</div>
  </div>
  <div class="row" [hidden]="!selectedBook.authors">
    <div class="col-3">Author:</div>
    <div class="col-9"><span [innerHTML]="selectedBook.authors | authornames"></span></div>
  </div>
  <div class="row" [hidden]="!selectedBook.year">
    <div class="col-3">Year:</div>
    <div class="col-9">{{ selectedBook.year }}</div>
  </div>
  <div class="row" [hidden]="!selectedBook.description">
    <div class="col-3">Description:</div>
    <div class="col-9">{{ selectedBook.description }}</div>
  </div>
</div>



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\book\book.component.spec.ts
========================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { BookComponent } from './book.component';
import {RouterTestingModule} from "@angular/router/testing";
import { provideHttpClientTesting } from "@angular/common/http/testing";
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';

describe('BookComponent', () => {
  let component: BookComponent;
  let fixture: ComponentFixture<BookComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
    imports: [RouterTestingModule, BookComponent],
    providers: [provideHttpClient(withInterceptorsFromDi()), provideHttpClientTesting()]
})
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(BookComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\book\book.component.ts
========================================
import {Component, inject, OnDestroy, OnInit} from '@angular/core';
import {ActivatedRoute} from '@angular/router';
import {Book} from '../model/book';
import {BooksService} from '../service/books.service';
import {Subscription} from "rxjs";
import { AuthornamesPipe } from '../../pipes/authornames.pipe';
import { NgIf } from '@angular/common';

@Component({
    selector: 'app-book',
    templateUrl: './book.component.html',
    styleUrls: ['./book.component.css'],
    standalone: true,
    imports: [NgIf, AuthornamesPipe]
})
export class BookComponent implements OnInit, OnDestroy {
  selectedBook!: Book | null;
  private subscription!: Subscription;
  private route: ActivatedRoute = inject(ActivatedRoute);
  private booksService: BooksService = inject(BooksService);

  ngOnInit(): void {
    this.route.params.subscribe(params => {
      const id = params['id'];
      this.subscription = this.booksService.getBook(id).subscribe({
        next: (data: Book) => {
          this.selectedBook = data;
        },
        error: (_: any) => {
          this.selectedBook = null;
        }
      });
    });
  }

  ngOnDestroy(): void {
    this.subscription.unsubscribe();
  }
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\model\book.spec.ts
========================================
import { Book, Author } from './book';

describe('Book', () => {
  it('should create an instance', () => {
    const authors: Author[] = []; 
    const book = new Book(
      1,                
      'test category',  
      'test title',     
      1,                
      authors,          
      2023,             
      'Test description'
    );
    expect(book).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\model\book.ts
========================================
export class Book {
  constructor(
    public id: number,
    public category: string,
    public title: string,
    public cost: number,
    public authors: Author[],
    public year: number,
    public description: string
  ) {}
}

export class Author {
  constructor(
    public id: number,
    public firstName: string,
    public lastName: string
  ) {}
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\service\books.service.spec.ts
========================================
import { TestBed } from '@angular/core/testing';

import { BooksService } from './books.service';
import {RouterTestingModule} from "@angular/router/testing";
import { provideHttpClientTesting } from "@angular/common/http/testing";
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';

describe('BooksService', () => {
  let service: BooksService;

  beforeEach(() => {
    TestBed.configureTestingModule({
    imports: [RouterTestingModule],
    providers: [BooksService, provideHttpClient(withInterceptorsFromDi()), provideHttpClientTesting()]
});
    service = TestBed.inject(BooksService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\books\service\books.service.ts
========================================
import {inject, Injectable} from '@angular/core';
import {Author, Book} from '../model/book';
import { HttpClient, HttpParams } from "@angular/common/http";
import {Observable} from "rxjs";
import {map} from 'rxjs/operators';

const Url = 'http://localhost:8080/books-api/';

@Injectable({
  providedIn: 'root'
})
export class BooksService {

  private http: HttpClient = inject(HttpClient);

  public getBook(id: string): Observable<Book> {
    return this.http.get<Book>(Url + 'books/' + id);
  }

  public addBook(book: Book): Observable<Book> {
    return this.http.post<Book>(Url + 'books', book);
  }

  public addBookAuthor(id: number, author: Author): Observable<Author> {
    return this.http.post<Author>(Url + 'books/' + id + '/authors', author);
  }

  public getAuthorsNamed(firstName: string, lastName: string): Observable<any> {
    const options = {params: new HttpParams().set('firstName', firstName).set('lastName', lastName)};
    return this.http.get<any>(Url + 'authors', options).pipe(
      map(response => response._embedded ? response._embedded.authors : undefined )
    );
  }

  public updateBookAuthors(bookId: number, authorId: number): Observable<any> {
    return this.http.patch(Url + 'books/' + bookId + '/authors/' + authorId, {});
  }

  public getAuthorById(id: number): Observable<Author> {
    return this.http.get<Author>(`${Url}authors/${id}`);
  }
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\contact\contact.component.css
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\contact\contact.component.html
========================================
<p style="text-align: center">
      <span style="color: #3465a4; font-size: x-large; "><b>
        YAMAZONE Books <br>
        1234 Reading Street <br>
        Ottawa, R0R 0R0 <br>
      </b></span>
</p>
<p style="text-align: center">
      <span style="color: #3465a4; font-size: small; "><b>
        yamazone&#64;read.com
      </b></span>
</p>




========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\contact\contact.component.spec.ts
========================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ContactComponent } from './contact.component';

describe('ContactComponent', () => {
  let component: ContactComponent;
  let fixture: ComponentFixture<ContactComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
    imports: [ContactComponent]
})
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(ContactComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\contact\contact.component.ts
========================================
import { Component } from '@angular/core';

@Component({
    selector: 'app-contact',
    templateUrl: './contact.component.html',
    styleUrls: ['./contact.component.css'],
    standalone: true
})
export class ContactComponent {

}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\home\home.component.css
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\home\home.component.html
========================================
<p style="text-align: center">
    <span style="color: #3465a4; font-size: xx-large; "><b>Welcome
      to the YAMAZONE Book Repository. </b></span>
</p>
<p style="text-align: center">
      <span style="color: #3465a4; font-size: x-large; "><b>We
        are happy to help you with your search.
      </b></span>
</p>
<p style="text-align: center">
      <span style="color: #1a503a; font-size: small; "><b>Please
      select Books to browse our catalogue
      </b></span>
</p>



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\home\home.component.spec.ts
========================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
    imports: [HomeComponent]
})
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\home\home.component.ts
========================================
import { Component } from '@angular/core';

@Component({
    selector: 'app-home',
    templateUrl: './home.component.html',
    styleUrls: ['./home.component.css'],
    standalone: true
})
export class HomeComponent {

}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\login\login.component.css
========================================



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\login\login.component.html
========================================
<div class="alert alert-danger" role="alert" *ngIf="message">
  {{ message }}
</div>

<div class="container" *ngIf="!isLoggedIn">
  <div class="mb-2">
    <label for="username" class="form-label">UserName : </label>
    <input type="text" name="username" id="username" [(ngModel)]="username" class="form-control">
  </div>
  <div class="mb-2">
    <label for="password" class="form-label">Password  : </label>
    <input type="password" name="password" id="password" [(ngModel)]="password" class="form-control">
  </div>
  <button (click)=checkLogin() class="btn btn-success">
    Login
  </button>
</div>
<div class="form-group" *ngIf="isLoggedIn">
  <p>Logged in as <b>{{ loggedUser }}</b></p>
  <button (click)=logout() class="btn btn-danger">
    Log out
  </button>
</div>



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\login\login.component.spec.ts
========================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';
import {RouterTestingModule} from "@angular/router/testing";
import { provideHttpClientTesting } from "@angular/common/http/testing";
import {FormsModule, ReactiveFormsModule} from "@angular/forms";
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
    imports: [RouterTestingModule, FormsModule, ReactiveFormsModule, LoginComponent],
    providers: [provideHttpClient(withInterceptorsFromDi()), provideHttpClientTesting()]
})
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\login\login.component.ts
========================================
import { Component } from '@angular/core';
import {AuthenticationService} from '../authentication.service';
import {Router} from '@angular/router';
import { FormsModule } from '@angular/forms';
import { NgIf } from '@angular/common';

@Component({
    selector: 'app-login',
    templateUrl: './login.component.html',
    styleUrls: ['./login.component.css'],
    standalone: true,
    imports: [NgIf, FormsModule]
})
export class LoginComponent {
  username = '';
  password = '';
  message!: string;

  constructor(private router: Router,
              private loginService: AuthenticationService) { }

  get isLoggedIn(): boolean {
    return this.loginService.isLoggedIn();
  }

  get loggedUser(): string {
    return this.loginService.getUser();
  }

  checkLogin(): boolean {
    this.message = '';
    if (!this.loginService.login(this.username, this.password)) {
      this.message = 'Invalid Login';
      setTimeout(() => {
        this.message = '';
      }, 2500);
      return false;
    }
    return true;
  }

  logout(): boolean {
    this.loginService.logout();
    return true;
  }
}



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\pipes\authornames.pipe.spec.ts
========================================
import { AuthornamesPipe } from './authornames.pipe';

describe('AuthornamesPipe', () => {
  it('create an instance', () => {
    const pipe = new AuthornamesPipe();
    expect(pipe).toBeTruthy();
  });
});



========================================
FILE: c:\Users\samlb\github-classroom\SEG3102F24\lab7-samuelbraun04\src\app\pipes\authornames.pipe.ts
========================================
import { Pipe, PipeTransform } from '@angular/core';
import {Author} from '../books/model/book';

@Pipe({
    name: 'authornames',
    standalone: true
})
export class AuthornamesPipe implements PipeTransform {

  transform(value: Author[] | undefined): string {
    if (value == null) return '';
    return value.map((author) => `${author.firstName}, ${author.lastName}`).join(' <b>and</b> ');
  }

}


